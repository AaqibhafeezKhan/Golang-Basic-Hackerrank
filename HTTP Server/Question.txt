

---

**Go: HTTP Server**

Implement an HTTP server that has three routes and maintains a database of the worldâ€™s largest lakes.

- The first route runs a handler `postHandler` which accepts a POST request with JSON-encoded lake information and posts it to the database.

```json
{
  "type": "post",
  "payload": {
    "id": "id00",
    "name": "Name of the lake",
    "area": 452081
  }
}
```

- The second route runs a handler `deleteHandler` which deletes the lake from the database by ID. If the payload ID is not present in the data set, the server returns a 404 response.

```json
{
  "type": "delete",
  "payload": "id00"
}
```

- The third route runs a handler `getHandler` which takes a lake from the database by ID and returns it to the caller while printing the name of the lake and the area. If the ID is not found in the database, the server returns a string message `"404 Not Found"`. Otherwise, it returns the payload object corresponding to the ID.

```json
{
  "type": "get",
  "payload": "id00"
}
```

Implement the server which will be queried by the program and print the output to STDOUT.

---

### **Notes**
- The program uses these structs:

```go
type Lake struct {
    Name string
    Area int32
}

type Action struct {
    Type    string
    Payload string
}
```

- The base URL is contained in the global variable `address`. Data is stored under the store variable which is the `map[string]Lake`.

---

### **Constraints**
- The total number of queries does not exceed 1000.
- The name and ID strings consist of no more than 100 lowercase and uppercase English characters only.
- All the post IDs are unique.

---

### **Input Format For Custom Testing**
1. The first line contains an integer, `n`, the number of elements in `actions`.
2. Each line of the subsequent `n` lines (where \(0 \leq i < n\)) contains a string, `actions[i]`.

---

### **Sample Input For Custom Testing**

#### **Sample Case 0**
```json
5
{"type":"post", "payload":{"id":"id000", "name":"Malawi", "area":20580}}
{"type":"post", "payload":{"id":"id001", "name":"Great Bear Lake", "area":31000}}
{"type":"get", "payload":"id001"}
{"type":"get", "payload":"id000"}
{"type":"get", "payload":"id002"}
```

#### **Sample Output**
```
Great Bear Lake
31000
Malawi
20580
404 Not Found
```

**Explanation**:
- The first two actions call `postHandler` and put two objects in the store.
- The 3rd and 4th actions get items from the store by corresponding IDs.
- The 5th action tries to get an item that does not exist, returning "404 Not Found".

---

#### **Sample Case 1**
```json
5
{"type":"post", "payload":{"id":"id000", "name":"Malawi", "area":20580}}
{"type":"post", "payload":{"id":"id001", "name":"Great Bear Lake", "area":31000}}
{"type":"delete", "payload":"id000"}
{"type":"get", "payload":"id001"}
{"type":"get", "payload":"id000"}
```

#### **Sample Output**
```
Great Bear Lake
31000
404 Not Found
```

**Explanation**:
- The first two actions call `postHandler` and put two objects in the store.
- The 3rd action deletes the object with ID "id000".
- The 4th and 5th actions get items from the store by corresponding IDs.
- Since the object "id000" was deleted, the 5th message is "404 Not Found".

---


